#version 440 core
layout( local_size_x = 32, local_size_y = 32 ) in;

layout(rgba32f, binding = 0) uniform image2D image;

uniform float random_seed;

uniform vec2 camera_min;
uniform vec2 camera_max;

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)); }

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}

// Pseudo-random value in half-open range [0:1].
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

float rand(int seed){ 
	vec2 co = vec2(gl_GlobalInvocationID.xy);
	return fract(random(vec3(co + seed * vec2(1000.0, 1000.0), random_seed)));
}

vec2 random_dir(int seed) 
{
	float rand_angle = radians(rand(seed + 100) * 360.0);
	return vec2(cos(rand_angle), sin(rand_angle));
}

#define MAX_REFLECTIONS 8
#define EPSILON 0.0001
#define INFINITY 10000000.0

struct Ray 
{
	vec2 origin;
	vec2 direction;
	float near;
	float far;
};

struct Material 
{
	float emissive;
	float reflective;
	float refractive;
	float diffuse;

	vec3 emission_color;
	vec3 diffuse_color;
	vec3 eta;
};

struct IntersectionData 
{
	bool intersection;
	float t;
	vec2 normal;
	int material_id;
};

struct Circle 
{
	vec2 center;
	float radius;
	int material_id;
};

struct Triangle
{
	vec2 vert_0;
	vec2 vert_1;
	vec2 vert_2;
	int material_id;
};

layout(std430, binding = 0) buffer MATERIALS 
{
	Material materials[];
};

layout(std430, binding = 1) buffer CIRCLES
{
	Circle circles[];
};

layout(std430, binding = 2) buffer TRIANGLES
{
	Triangle triangles[];
};

layout(std430, binding = 3) buffer WAVELENGTHS
{
	// x - wavelength; yzw - color
	vec4 wavelength_colors[];
};

IntersectionData IntersectCircle(Ray ray, Circle circle)
{
	IntersectionData data = IntersectionData(false, 0.0, vec2(0.0), circle.material_id);

	// |(Src + Dir * x) - Center| = R
	// (Src - Center) = t
	// dot(t + Dir * x, t + Dir * x) = R^2
	// dot(t, t) + dot(Dir, Dir) * x^2 + 2 * dot(t, Dir) * x = R^2
	// |Dir| = 1 so dot(Dir, Dir) = 1
	// x^2 + 2x * dot(t, Dir) + dot(t, t) - R^2 = 0
	vec2 t = ray.origin - circle.center;
	float half_b = dot(t, ray.direction);
	float quart_discr = half_b * half_b - dot(t, t) + circle.radius * circle.radius;
	if(quart_discr < 0) return data;
	
	float half_sqrt_discr = sqrt(quart_discr);

	float x0 = -half_b - half_sqrt_discr;
	float x1 = -half_b + half_sqrt_discr;
	
	float x0_check = sign((x0 - ray.near) * (ray.far - x0));
	float x1_check = sign((x1 - ray.near) * (ray.far - x1));

	if (x0_check + x1_check < 0.0) return data;

	data.t = (x0_check + 1.0) * 0.5 * x0 + (1.0 - x0_check) * 0.5 * x1;
	data.intersection = true;
	vec2 intersection_point = ray.origin + ray.direction * data.t;
	data.normal = (intersection_point - circle.center) / circle.radius;

	return data;
}

// z in output = 0.0 if there is no intersection; 1.0 elsewhere.
vec3 IntersectSegments(vec2 seg0_pt0, vec2 seg0_pt1, vec2 seg1_pt0, vec2 seg1_pt1)
{
	float a1 = seg0_pt1.x - seg0_pt0.x;
	float a2 = seg1_pt0.x - seg1_pt1.x;
	float a3 = seg1_pt0.x - seg0_pt0.x;

	float b1 = seg0_pt1.y - seg0_pt0.y;

	float n = (a3 * b1 - (seg1_pt0.y - seg0_pt0.y) * a1) / (a2 * b1 - (seg1_pt0.y - seg1_pt1.y) * a1);
	float m = (a3 - n * a2) / a1;

	vec3 result = vec3(mix(seg0_pt0, seg0_pt1,  m), 0.0);

	if(n * (n - 1.0) <= 0.0 && m * (m - 1.0) <= 0.0)
		result.z = 1.0;

	return result;
}

IntersectionData IntersectTriangle(Ray ray, Triangle triangle)
{
	IntersectionData data = IntersectionData(false, 0.0, vec2(0.0), triangle.material_id);

	vec2 ray_start = ray.origin + ray.direction * ray.near;
	vec2 ray_end = ray.origin + ray.direction * ray.far;

	vec3 i0 = IntersectSegments(ray_start, ray_end, triangle.vert_1, triangle.vert_2);
	vec3 i1 = IntersectSegments(ray_start, ray_end, triangle.vert_0, triangle.vert_2);
	vec3 i2 = IntersectSegments(ray_start, ray_end, triangle.vert_0, triangle.vert_1);

	if(i0.z == 0.0 && i1.z == 0.0 && i2.z == 0.0)
		return data;

	i0.xy = i0.xy * i0.z + (1.0 - i0.z) * (ray_end * 2.0 - ray_start);
	i1.xy = i1.xy * i1.z + (1.0 - i1.z) * (ray_end * 2.0 - ray_start);
	i2.xy = i2.xy * i2.z + (1.0 - i2.z) * (ray_end * 2.0 - ray_start);

	vec3 ts = (vec3(i0.x, i1.x, i2.x) - vec3(ray.origin.x)) / ray.direction.x;

	data.intersection = true;
	data.t = min(ts.x, min(ts.y, ts.z));

	vec3 k = abs(sign(ts - vec3(data.t)));
	vec2 side = k.x * (triangle.vert_1 - triangle.vert_2) +
				k.y * (triangle.vert_2 - triangle.vert_0) +
				k.z * (triangle.vert_0 - triangle.vert_1);
	data.normal = normalize(vec2(-side.y, side.x));

	return data;
}

IntersectionData trace_ray(Ray ray)
{
	IntersectionData data;
	data.t = INFINITY;

	for(int i = 0; i < circles.length(); i++)
	{
		IntersectionData circle_data = IntersectCircle(ray, circles[i]);
		if(circle_data.intersection && circle_data.t < data.t) data = circle_data;
	}

	for(int i = 0; i < triangles.length(); i++)
	{
		IntersectionData triangle_data = IntersectTriangle(ray, triangles[i]);
		if(triangle_data.intersection && triangle_data.t < data.t) data = triangle_data;
	}

	return data;
}

float EtaBywavelength(float wavelength, Material material)
{
	float inv_wl_sqr = 1.0 / (wavelength * wavelength);
	return dot(material.eta, vec3(1.0, inv_wl_sqr, inv_wl_sqr * inv_wl_sqr));
}

vec3 get_color(vec2 pos, float wavelength)
{
	vec2 dir = random_dir(0);
	Ray ray = Ray(pos, dir, EPSILON, INFINITY);

	vec3 color = vec3(1.0);

	for(int i = 0; i < MAX_REFLECTIONS; i++)
	{
		IntersectionData data = trace_ray(ray);

		if(!data.intersection) return vec3(0.0);

		vec2 intersection_point = ray.origin + ray.direction * data.t;

		// inside the primitive
		//if(i == 0 && dot(data.normal, ray.direction) > 0.0) { return vec3(0.0); }

		Material material = materials[data.material_id];

		float rand = rand(i + 2) * (material.emissive + material.reflective + material.diffuse + material.refractive);

		if(rand < material.emissive)
		{// emit
			return material.emission_color * color;
		}
		else if(rand < material.emissive + material.reflective)
		{// reflect
			vec2 next_dir = reflect(ray.direction, data.normal);
			ray = Ray(intersection_point, next_dir, EPSILON, INFINITY);
		}
		else if(rand < material.emissive + material.reflective + material.diffuse)
		{// diffuse reflect
			color *= material.diffuse_color;

			vec2 next_dir = random_dir(i + 1);
			next_dir *= sign(dot(next_dir, data.normal));

			ray = Ray(intersection_point, next_dir, EPSILON, INFINITY);
		}
		else
		{// refract
			vec2 next_dir = vec2(0.0);
			float normal_direction = sign(dot(ray.direction, data.normal));
			
			float eta = EtaBywavelength(wavelength, material);

			next_dir = refract(ray.direction, -normal_direction * data.normal, pow(eta, normal_direction));

			if(abs(next_dir.x) + abs(next_dir.y) < EPSILON)
				next_dir = reflect(ray.direction, data.normal);
			ray = Ray(intersection_point, next_dir, EPSILON, INFINITY);
		}
	}

	return vec3(0.0);
}

vec2 get_pixel_pos(ivec2 pixel)
{
	vec2 img_size = vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
	vec2 pixel_aa = vec2(pixel) + vec2(rand(0), rand(1)) - vec2(0.5);
	vec2 normalized_pos = pixel_aa / img_size;
	return camera_min + normalized_pos * (camera_max - camera_min);
}

void main()
{
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
  vec2 pos = get_pixel_pos(pixel_coords);

  vec3 color;
  vec3 wavelength_color_sum;

  for(int i = 0; i < wavelength_colors.length(); i++)
  {
	color += get_color(pos, wavelength_colors[i].x) * wavelength_colors[i].yzw;
	wavelength_color_sum += wavelength_colors[i].yzw;
  }

  color /= wavelength_color_sum;

  vec4 curr_color = imageLoad(image, pixel_coords);
  imageStore(image, pixel_coords, vec4(curr_color.xyz + color, 1.0));
}